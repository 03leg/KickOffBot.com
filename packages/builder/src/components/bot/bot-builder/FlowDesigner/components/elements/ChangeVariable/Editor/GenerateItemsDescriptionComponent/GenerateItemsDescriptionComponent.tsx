import { AddValueToArrayAutoGenerateDescription, ArrayItemsGenerator, TimeSlotsGeneratorDescription, VariableType } from '@kickoffbot.com/types';
import { Box, MenuItem, Select, SelectChangeEvent, Typography } from '@mui/material';
import React, { useCallback } from 'react';
import { useGenerateItemsDescriptionComponentStyles } from './GenerateItemsDescriptionComponent.style';
import { TimeSlotsFunctionDescriptionComponent } from '../TimeSlotsFunctionDescriptionComponent';
import { throwIfNil } from '~/utils/guard';

interface Props {
    value: AddValueToArrayAutoGenerateDescription | undefined;
    jsonTypeOfArrayItem: Omit<VariableType, VariableType.ARRAY>;
    onValueChange: (newValue: AddValueToArrayAutoGenerateDescription) => void
}

export const GenerateItemsDescriptionComponent = ({ value, jsonTypeOfArrayItem, onValueChange }: Props) => {
    const { classes } = useGenerateItemsDescriptionComponentStyles();

    const handleFunctionNameChange = useCallback((event: SelectChangeEvent) => {
        onValueChange({ ...(value ?? {} as AddValueToArrayAutoGenerateDescription), functionName: event.target.value as ArrayItemsGenerator });
    }, [onValueChange, value]);

    const handleDescriptionChange = useCallback((newValue: TimeSlotsGeneratorDescription) => {
        throwIfNil(value);
        onValueChange({ ...value, description: newValue });
    }, [onValueChange, value]);

    return (
        <Box className={classes.root}>
            <Typography>Function name:</Typography>
            <Select
                fullWidth
                value={value?.functionName ?? ''}
                onChange={handleFunctionNameChange}
            >
                {jsonTypeOfArrayItem === VariableType.DATE_TIME && <MenuItem value={ArrayItemsGenerator.TIME_SLOTS_GENERATOR}>Time slots</MenuItem>}
            </Select>

            {value?.functionName === ArrayItemsGenerator.TIME_SLOTS_GENERATOR &&
                <TimeSlotsFunctionDescriptionComponent value={value.description} onValueChange={handleDescriptionChange} />}
        </Box>
    )
}
